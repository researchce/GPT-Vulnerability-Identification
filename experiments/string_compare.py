from difflib import SequenceMatcher
from Levenshtein import ratio
from collections import Counter
import re
import math
from enum import Enum

"""
This script provides functionalities to compare strings using different algorithms such as Levenshtein, SequenceMatcher, and Cosine similarity.
It includes:
- Enum definitions for different algorithm types.
- Functions to prepare strings for comparison.
- Functions to compare strings using specified algorithms.

Classes:
- AlgorithmType: Enum to specify the type of string comparison algorithm.

Functions:
- compare_string: Compares two strings using a specified algorithm.
- levenshtein: Computes the Levenshtein ratio between two strings.
- matcher: Computes the SequenceMatcher ratio between two strings.
- cosine: Computes the Cosine similarity between two strings.
- text_to_vector: Converts text to a vector of word counts.
- get_cosine: Computes the Cosine similarity between two vectors.
- prepareStrings: Prepares strings by removing specified characters.

Usage:
- Call compare_string with the base string, module string, and the desired algorithm to get the similarity ratio.
"""

class AlgorithmType(Enum):
    LEVENSHTEIN = 'LEVENSHTEIN'
    MATCHER = 'MATCHER'
    COSINE = 'COSINE'

def compare_string(base, module, algorithm):
    # Compare two strings using a specified algorithm
    matchRatio = 0
    base = prepareStrings(base)
    module = prepareStrings(module)
    if algorithm == AlgorithmType.LEVENSHTEIN:
        matchRatio = levenshtein(base, module)
    elif algorithm == AlgorithmType.MATCHER:
        matchRatio = matcher(base, module)
    elif algorithm == AlgorithmType.COSINE:
        matchRatio = cosine(base, module)
    return matchRatio

def levenshtein(base, module):
    # Compute the Levenshtein ratio between two strings
    matchRatio = ratio(base, module)
    return matchRatio

def matcher(base, module):
    # Compute the SequenceMatcher ratio between two strings
    matchRatio = SequenceMatcher(lambda x: re.match("[!@#%^&*()_+-={}|;':\"<>?~]", x), base, module).ratio()
    return matchRatio

def cosine(base, module):
    # Compute the Cosine similarity between two strings
    vector1 = text_to_vector(base)
    vector2 = text_to_vector(module)
    cosine = get_cosine(vector1, vector2)
    return cosine

def text_to_vector(text):
    # Convert text to a vector of word counts
    WORD = re.compile(r"\w+")
    words = WORD.findall(text)
    return Counter(words)

def get_cosine(vec1, vec2):
    # Compute the Cosine similarity between two vectors
    intersection = set(vec1.keys()) & set(vec2.keys())
    numerator = sum([vec1[x] * vec2[x] for x in intersection])

    sum1 = sum([vec1[x] ** 2 for x in list(vec1.keys())])
    sum2 = sum([vec2[x] ** 2 for x in list(vec2.keys())])
    denominator = math.sqrt(sum1) * math.sqrt(sum2)

    if not denominator:
        return 0.0
    else:
        return float(numerator) / denominator

def prepareStrings(raw_string):
    # Prepare strings by removing specified characters
    characters = "-()%&{}!/.,"
    for character in characters:
        raw_string = raw_string.replace(character, "")
    print(raw_string)
    return raw_string
