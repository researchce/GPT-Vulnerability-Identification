import os
import json
import numpy as np

"""
This script defines a class to analyze CVE (Common Vulnerabilities and Exposures) data from JSON files.
It includes functionalities to:
- Read JSON files from a specified folder.
- Extract time-related data from the JSON files.
- Calculate statistical metrics on the extracted time data.

Classes:
- CVEDataAnalyzer: Manages the analysis of CVE data.

Functions:
- __init__: Initializes the class with the folder path.
- read_json_files: Reads all JSON files in the specified folder.
- extract_times: Extracts the "Time" values from the combined data.
- calculate_statistics: Calculates statistical metrics using numpy.
- analyze: Combines all steps for analysis.

Usage:
- Initialize CVEDataAnalyzer with the folder path containing JSON files.
- Call the analyze method to perform the analysis and get statistical metrics.
"""

class CVEDataAnalyzer:
    def __init__(self, folder_path):
        # Initialize the class with the folder path
        self.folder_path = folder_path
        self.data = []
        self.times = []
        
    def read_json_files(self):
        # Read all JSON files in the specified folder
        for filename in os.listdir(self.folder_path):
            if filename.endswith('.json'):
                file_path = os.path.join(self.folder_path, filename)
                with open(file_path, 'r') as f:
                    file_data = json.load(f)
                    self.data.extend(file_data)

    def extract_times(self):
        # Extract the "Time" values from the combined data
        self.times = [item['Time'] for item in self.data]

    def calculate_statistics(self):
        if not self.times:
            raise ValueError("No time data to analyze")

        # Calculate statistical metrics using numpy
        mean_time = np.mean(self.times)
        std_time = np.std(self.times)
        min_time = np.min(self.times)
        max_time = np.max(self.times)
        total_time = np.sum(self.times)  # Calculate the total time
        
        return {
            'mean': mean_time,
            'std': std_time,
            'min': min_time,
            'max': max_time,
            'total': total_time,  # Include the total time
            'count': len(self.times)
        }

    def analyze(self):
        # Combine all steps for analysis
        self.read_json_files()
        self.extract_times()
        return self.calculate_statistics()
    
# Example usage
folder_path = '/Users/andresvargasrivera/repos/cve-automations/results_2023/gpt3/time'
# folder_path = "/Users/andresvargasrivera/repos/cve-automations/results_2023/heuristic/time"
analyzer = CVEDataAnalyzer(folder_path)
statistics = analyzer.analyze()
print(statistics)
