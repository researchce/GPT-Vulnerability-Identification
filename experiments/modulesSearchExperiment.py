import pandas as pd
import json
from mongoDBHandler import MongoDBHandler
from cveCheckerProxy import CveCheckerProxy, EvaluatorTypes

"""
This script manages the execution of module search experiments to evaluate software modules against CVE (Common Vulnerabilities and Exposures) descriptions.
It includes functionalities to:
- Load and parse configuration files.
- Search for modules in MongoDB collections.
- Evaluate modules using different evaluator types.
- Generate output files with the results.

Classes:
- ModulesSearchExperiment: Manages the module search and evaluation experiments.

Functions:
- load_config: Loads configuration from a JSON file.
- analyze_experiment: Executes the experiment by searching and evaluating modules.
- search_modules: Searches for modules in a specified MongoDB collection.
- evaluate_module: Evaluates if a module is vulnerable using a specified evaluator type.
- generate_output_file: Generates an output file with the results of the experiment.

Usage:
- Initialize ModulesSearchExperiment with the path to the configuration file.
- Call analyze_experiment to execute the search and evaluation.
"""

class ModulesSearchExperiment:
    def __init__(self, config_path):
        # Initialize with configuration, MongoDB handler, and CVE checker
        self.config = self.load_config(config_path)
        
        db_name = self.config["database_name"]
        experiments = self.config["experiments"]
        json_file_path = self.config["modules_test_file"]
        connection_string = self.config["connection_string"]

        self.results_file = self.config["modules_results_file"]
        self.mongo_handler = MongoDBHandler(connection_string, db_name)
        self.json_file_path = json_file_path
        self.collections = [experiment["collection_name"] for experiment in experiments]
        self.cveChecker = CveCheckerProxy(self.config["gptCVECheckerPrompt"], self.config["cve_descriptions"])
        print("collections: ", self.collections)

    def load_config(self, config_path):
        # Load configuration from a JSON file
        with open(config_path, "r") as f:
            config = json.load(f)
        return config

    def analyze_experiment(self, evaluate=False):
        # Execute the experiment by searching and evaluating modules
        modules_data = {}
        evaluatorType = None
        for collection in self.collections:
            if evaluate:
                evaluatorType = EvaluatorTypes.GPT3FULL
            modules_data[collection] = self.search_modules(collection, evaluatorType)
        self.generate_output_file(modules_data)

    def search_modules(self, collection, evaluatorType):
        # Search for modules in a specified MongoDB collection
        with open(self.json_file_path, 'r') as f:
            cve_data = json.load(f)
        modules = {}
        for cve_entry in cve_data["cves"]:
            vulnerable_cves = []
            module = cve_entry["isVulnerable"]["Module"]
            version = cve_entry["isVulnerable"]["Version"]
            search_results = self.mongo_handler.search_documents(collection, module)
            print(f"***** Evaluating Module {module} in {len(search_results)} modules *****")
            if search_results:
                if evaluatorType:
                    vulnerable_cves = self.evaluate_module(search_results, module, version, evaluatorType)
            if module not in modules:
                modules[module] = {"foundCVES": [], "vulnerableCVES": vulnerable_cves}
            for result in search_results:
                modules[module]["foundCVES"].append(result["CVE_ID"])
        return modules

    def evaluate_module(self, search_results, module, version, evaluatorType):
        # Evaluate if a module is vulnerable using a specified evaluator type
        vulnerable_cves = []
        if search_results:
            for cve in search_results:
                cve_id = cve["CVE_ID"]
                if self.cveChecker.evaluate_module(cve_id, module, version, evaluatorType):
                    vulnerable_cves.append(cve_id)
        return vulnerable_cves

    def generate_output_file(self, modules_data):
        # Generate an output file with the results of the experiment
        with open(self.results_file, "w") as output_file:
            json.dump(modules_data, output_file)
            print(f"JSON saved to {self.results_file}")

# Example usage
if __name__ == "__main__":
    config_path = "path/to/config.json"
    analyzer = ModulesSearchExperiment(config_path)
    analyzer.analyze_experiment()
