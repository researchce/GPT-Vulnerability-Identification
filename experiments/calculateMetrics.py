import pandas as pd
import json
import glob

"""
This script processes JSON files containing metrics for different methods and calculates 
accuracy, recall, precision, and F1 score for each method. It then aggregates the results 
and computes the mean and standard deviation for each metric.

Functions:
- Iterates over JSON files in a specified directory.
- Extracts TP, TN, FP, and FN values for each method.
- Calculates accuracy, recall, precision, and F1 score.
- Stores results in a DataFrame.
- Aggregates results by method and calculates mean and standard deviation.

Usage:
- Set the `json_files_path` to the directory containing your JSON files.
- Run the script to print the results.
"""

# Path to the directory containing your JSON files
json_files_path = "/Users/andresvargasrivera/repos/cve-automations/results_2023/directComparison/run2/metrics/*.json"

# Create a list to store the results
results = []

# Iterate over each JSON file in the specified path
for i, file_path in enumerate(glob.glob(json_files_path)):
    with open(file_path, 'r') as file:
        data = json.load(file)  # Load the content of the JSON file
        
        # Extract metrics for each method
        for method_name, metrics in data.items():
            # Get values for TP, TN, FP, FN
            TP = metrics.get('TP', 0)
            TN = metrics.get('TN', 0)
            FP = metrics.get('FP', 0)
            FN = metrics.get('FN', 0)
            
            # Calculate metrics
            accuracy = (TP + TN) / (TP + TN + FP + FN) if (TP + TN + FP + FN) > 0 else 0  # Accuracy
            recall = TP / (TP + FN) if (TP + FN) > 0 else 0  # Recall
            precision = TP / (TP + FP) if (TP + FP) > 0 else 0  # Precision
            f1_score = 2 * ((precision * recall) / (precision + recall)) if (precision + recall) > 0 else 0  # F1 Score
            
            # Add to the results list
            results.append({
                'Run': i + 1,
                'Method': method_name,
                'TP': TP,
                'TN': TN,
                'FP': FP,
                'FN': FN,
                'Accuracy': accuracy,
                'Recall': recall,
                'Precision': precision,
                'F1 Score': f1_score
            })

# Create a DataFrame with the results
df = pd.DataFrame(results)

# Group by method and calculate the mean and standard deviation for each metric
grouped = df.groupby('Method').agg({
    'Accuracy': ['mean', 'std'],
    'Recall': ['mean', 'std'],
    'Precision': ['mean', 'std'],
    'F1 Score': ['mean', 'std']
})

# Print the DataFrame with the results for each run
print("Results by run:")
print(df)

# Print the aggregated results by method
print("Aggregated results by method:")
print(grouped)
