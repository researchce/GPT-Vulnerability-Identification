import json

"""
This script defines a class to analyze total failure results from multiple JSON files.
It includes functionalities to:
- Load JSON data from specified files.
- Identify CVEs that failed both OpenAI and Heuristic matching.
- Find common total failures across all files.

Classes:
- TotalFailureAnalyzer: Manages the analysis of total failure results.

Functions:
- __init__: Initializes the class with the file names.
- load_data: Loads data from the specified JSON files.
- find_total_failures: Identifies CVEs that have 'false' for both 'Match_OPENAI' and 'Match_Heuristic' in each file.
- find_common_total_failures: Finds the common total failures across all files.

Usage:
- Initialize TotalFailureAnalyzer with the list of JSON file names.
- Call find_total_failures to get total failures for each file.
- Call find_common_total_failures to get common total failures across all files.
"""

class TotalFailureAnalyzer:
    def __init__(self, file_names):
        # Initialize the class with the file names
        self.file_names = file_names
        self.data = []
        self.load_data()

    def load_data(self):
        # Load data from the specified JSON files
        for file_name in self.file_names:
            with open(file_name, 'r') as file:
                self.data.append(json.load(file))

    def find_total_failures(self):
        # Identify CVEs that have 'false' for both 'Match_OPENAI' and 'Match_Heuristic' in each file
        total_failures = {}

        for index, result_set in enumerate(self.data):
            current_failures = [
                entry["CVE-ID"]
                for entry in result_set
                if not entry["Match_OPENAI"] and not entry["Match_Heuristic"]
            ]
            total_failures[self.file_names[index]] = current_failures

        return total_failures

    def find_common_total_failures(self):
        # Find common total failures across all files
        failure_sets = [set(failures) for failures in self.find_total_failures().values()]

        # Find the intersection of all failure sets to get the common total failures
        common_total_failures = set.intersection(*failure_sets)

        return common_total_failures


# List of JSON file names with data
file_names = [
    "match_training_results-0.json",
    "match_training_results-1.json",
    "match_training_results-2.json",
    "match_training_results-3.json",
    "match_training_results-4.json",
]

# Create an instance of the TotalFailureAnalyzer class
total_failure_analyzer = TotalFailureAnalyzer(file_names)

# Get total failures for each file
total_failures_per_file = total_failure_analyzer.find_total_failures()

# Get common total failures for all files
common_total_failures = total_failure_analyzer.find_common_total_failures()

# Print results to the screen
# print("Total failures per file:", total_failures_per_file)
print("Common total failures:", common_total_failures)
