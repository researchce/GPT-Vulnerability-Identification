import openai
import json
import pandas as pd
import numpy as np
from enum import Enum
import time
from datetime import datetime

"""
This script manages the interaction with the OpenAI API to evaluate the vulnerability of software modules against CVE (Common Vulnerabilities and Exposures) descriptions.
It includes functionalities to:
- Load CVE data from CSV files.
- Generate prompts for the OpenAI API.
- Call the OpenAI API to get vulnerability evaluations.
- Process and validate the responses from the API.
- Save results to JSON files.

Classes:
- ComparationType: Enum to specify the type of comparison (DESCRIPTION or VERSIONS).

Functions:
- open_cve_list: Loads CVE data from a CSV file.
- call_open_api: Calls the OpenAI API with a given prompt.
- load_prompt_text: Loads and formats a prompt template with specific CVE details.
- clean_result: Cleans and validates the result from the OpenAI API.
- save_result: Saves the result to a JSON file.
- analyze_cve: Analyzes a CVE using the OpenAI API and processes the result.
- analyzeDescription: Analyzes a CVE description using the OpenAI API.
- analyzeVersions: Analyzes CVE versions using the OpenAI API.
- processResponse: Processes the response from the OpenAI API to determine vulnerability.
- searchCVEData: Searches for a specific CVE in the loaded CVE list.
- check_database: Checks the database for CVE details and analyzes them using the specified comparison type.

Usage:
- Set the TOKEN_VALUE with your OpenAI API key.
- Call check_database with the CVE ID, module, version, and comparison type to get the vulnerability analysis.
"""

TOKEN_VALUE = "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"

class ComparationType(Enum):
    DESCRIPTION = 'DESCRIPTION'
    VERSIONS = 'VERSIONS'

def open_cve_list(source):
    # Load CVE data from a CSV file
    cve_information = pd.read_csv(source, index_col=False)
    return cve_information

def call_open_api(token, cve_prompt):
    # Call the OpenAI API with a given prompt
    fail = False
    generated_text = ""
    try:
        openai.api_key = token
        prompt = cve_prompt
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt, 
            max_tokens=3000
        )
        generated_text = response.choices[0].text.strip()
    except Exception as e:
        retry_time = 2
        print(f"Error {e}. Retrying in {retry_time} seconds...", flush=True)
        time.sleep(retry_time)
        return call_open_api(token, cve_prompt)

    return generated_text, fail

def load_prompt_text(file, cve_id, cve_description, module, version):
    # Load and format a prompt template with specific CVE details
    with open(file) as f:
        lines = " ".join([l.rstrip("\n") for l in f])
        lines = lines.replace("<module>", module)
        lines = lines.replace("<version>", version)
        lines = lines.replace("<cve-id>", cve_id)
        lines = lines.replace("<cve-description>", str(cve_description))
        return lines

def clean_result(string, cve_id):
    # Clean and validate the result from the OpenAI API
    success = True
    json_string = ""
    try:
        json_string = json.loads(string)
    except:
        print("An exception occurred parsing cve", flush=True)
        success = False
        json_string = {"CVE_ID": cve_id, "vulnerable_versions": []}
    
    return json_string, success

def save_result(json_string, cve_id): 
    # Save the result to a JSON file
    with open(cve_id + '.json', 'w') as f:
        json.dump(json_string, f, indent=None)

def analyze_cve(token, cve_prompt, cve_id, attemp=0):
    # Analyze a CVE using the OpenAI API and process the result
    print("Running CVE ", cve_id, flush=True)
    response, fail = call_open_api(token, cve_prompt)
    success, vulnerableEvaluation = processResponse(response)
    isVulnerable = vulnerableEvaluation
    if not success:
        if attemp < 2:
            print("Retrying cve " + cve_id, flush=True)
            analyze_cve(token, cve_prompt, cve_id, attemp + 1)
        else:
            print("Abort cve " + cve_id, flush=True)
            isVulnerable = None
    return isVulnerable      

def analyzeDescription(cve_id, description, module, version):
    # Analyze a CVE description using the OpenAI API
    prompt_file = 'isVulnerable.txt'
    token = TOKEN_VALUE
    cve_st = time.time()
    cve_prompt = load_prompt_text(prompt_file, cve_id, description, module, version)
    print("Analyzing Description ", cve_id, flush=True)
    response = analyze_cve(token, cve_prompt, cve_id)
    print("openai response ", response, flush=True)
    cve_et = time.time()
    elapsed_time = cve_et - cve_st
    return response

def analyzeVersions(cve_id, vulnerable_array, module, version):
    # Analyze CVE versions using the OpenAI API
    prompt_file = 'isVulnerableVersions.txt'
    token = TOKEN_VALUE
    cve_st = time.time()
    cve_prompt = load_prompt_text(prompt_file, cve_id, vulnerable_array, module, version)
    print("Analyzing Versions ", cve_id, flush=True)
    response = analyze_cve(token, cve_prompt, cve_id)
    cve_et = time.time()
    elapsed_time = cve_et - cve_st
    print("openai response ", response, flush=True)
    return response

def processResponse(response):
    # Process the response from the OpenAI API to determine vulnerability
    all_words = response.replace(".", "")
    correct = False
    vulnerable = None
    if "true" in all_words.lower():
        vulnerable = True
        correct = True
    elif "false" in all_words.lower():
        vulnerable = False
        correct = True
    return correct, vulnerable

def searchCVEData(cve_id, cve_list):
    # Search for a specific CVE in the loaded CVE list
    for i, cve in cve_list.iterrows():
        if cve["CVE-ID"] == cve_id:
            return cve

def check_database(cve_id, module, version, type=ComparationType.DESCRIPTION, vulnerable_array=None):
    # Check the database for CVE details and analyze them using the specified comparison type
    source_file = 'bacnet_cve.csv'
    cves_info = open_cve_list(source_file)
    cve = searchCVEData(cve_id, cves_info)
    response = False
    if type == ComparationType.DESCRIPTION:
        response = analyzeDescription(cve["CVE-ID"], cve["DESCRIPTION"], module, version)
    elif type == ComparationType.VERSIONS:
        response = analyzeVersions(cve["CVE-ID"], vulnerable_array, module, version)
    return response
