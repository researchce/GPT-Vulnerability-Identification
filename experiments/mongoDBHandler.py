import json
import re
from pymongo import MongoClient

"""
This script defines a handler class to interact with a MongoDB database for managing CVE (Common Vulnerabilities and Exposures) data.
It includes functionalities to:
- Upload JSON data to a MongoDB collection.
- Search documents in a MongoDB collection.
- Count the number of documents in a collection.
- Delete a MongoDB collection.
- Get the count of modules per CVE document.
- Find a document by its CVE-ID.

Classes:
- MongoDBHandler: Manages the interaction with the MongoDB database.

Functions:
- upload_json: Uploads JSON data to a specified collection.
- search_documents: Searches for documents in a collection based on a query.
- get_record_count: Returns the count of documents in a collection.
- delete_collection: Deletes a specified collection.
- get_module_count_per_document: Gets the count of modules for each CVE document.
- find_document_by_cve_id: Finds a document by its CVE-ID.

Usage:
- Initialize MongoDBHandler with the connection string and database name.
- Call the respective methods to perform database operations.
"""

class MongoDBHandler:
    def __init__(self, connection_string, database_name):
        # Initialize MongoDB client and database
        self.client = MongoClient(connection_string)
        self.db = self.client[database_name]

    def upload_json(self, json_file_path, collection_name, key):
        # Upload JSON data to a specified collection
        with open(json_file_path, 'r') as f:
            data = json.load(f)
        collection = self.db[collection_name]
        result = collection.insert_many(data[key])
        return result.inserted_ids

    def search_documents(self, collection_name, search_query):
        # Search for documents in a collection based on a query
        collection = self.db[collection_name]
        search_words = search_query.split()

        # Construct individual queries for each word
        and_queries = []
        for word in search_words:
            regex_query = f".*{word}.*"
            regex = re.compile(regex_query, re.IGNORECASE)
            query = {"vulnerable_versions.module": {"$regex": regex.pattern, '$options': 'i'}}
            and_queries.append(query)

        # Construct the final $and query
        final_query = {"$and": and_queries}

        # Execute the query and collect the results
        results = list(collection.find(final_query))
        return results

    def get_record_count(self, collection_name):
        # Return the count of documents in a collection
        collection = self.db[collection_name]
        count = collection.count_documents({})
        return count

    def delete_collection(self, collection_name):
        # Delete a specified collection
        collection = self.db[collection_name]
        collection.drop()
        return f"Collection '{collection_name}' deleted successfully."
    
    def get_module_count_per_document(self, collection_name):
        # Get the count of modules for each CVE document
        collection = self.db[collection_name]
        pipeline = [
            {"$project": {"_id": 0, "CVE_ID": 1, "module_count": {"$size": "$vulnerable_versions"}}}
        ]
        module_counts = collection.aggregate(pipeline)
        result = [{"CVE-ID": doc["CVE_ID"], "ModulesCount": doc["module_count"]} for doc in module_counts]
        return result
    
    def find_document_by_cve_id(self, collection_name, cve_id):
        # Find a document by its CVE-ID
        collection = self.db[collection_name]
        document = collection.find_one({"CVE_ID": cve_id})

        if document:
            return document
        else:
            return f"No document found with CVE-ID: {cve_id}"
    
# Example configuration and usage of the class
if __name__ == "__main__":
    # Configure the class to connect to the database
    connection_string = "mongodb+srv://afelipevargasr:9TC5hlN9CdC3czP6@cluster0.lrohl7y.mongodb.net/"  # Change according to your MongoDB server configuration
    database_name = "test-database"
    handler = MongoDBHandler(connection_string, database_name)

    # Upload a JSON database
    json_file_path = "/Users/andresvargasrivera/repos/cve-automations/open_ai_api/results/database-openai-0.json"  # Path to the JSON file
    collection_name = "test-upload-01"
    print(handler.delete_collection(collection_name))
    uploaded_ids = handler.upload_json(json_file_path, collection_name, "cves")

    # Perform a search in the database
    search_query = "XDR PALO"
    search_results = handler.search_documents(collection_name, search_query)
    print("Search Results:", search_results)

    # Get the count of records in the database
    record_count = handler.get_record_count(collection_name)
    print("Record Count:", record_count)

    # Get the count of modules per CVE document
    modules_per_cve = handler.get_module_count_per_document(collection_name)
    print("modules_per_cve Count:", modules_per_cve)
