import csv

def clean_cves(input_file):
    # Lista para almacenar los CVEs limpiados
    cleaned_cves = []

    # Contadores para los tipos de CVEs eliminados
    rejected_count = 0
    reserved_count = 0

    # Lectura del archivo CSV de entrada
    with open(input_file, 'r', newline='', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        # Lista para almacenar las filas que no deben ser eliminadas
        valid_rows = []

        for row in reader:
            # Verificar si la descripción contiene los patrones de CVEs a eliminar
            description = row["DESCRIPTION"]
            if "** REJECT **" in description:
                rejected_count += 1
            elif "** RESERVED **" in description:
                reserved_count += 1
            else:
                valid_rows.append(row)

        # Guardar los CVEs limpiados en la lista
        cleaned_cves = [row["CVE-ID"] for row in valid_rows]

        # Escribir el archivo CSV purgado
        output_file = input_file.replace('.csv', '-purged.csv')
        with open(output_file, 'w', newline='', encoding='utf-8') as outfile:
            writer = csv.DictWriter(outfile, fieldnames=reader.fieldnames)
            writer.writeheader()
            writer.writerows(valid_rows)

    # Calcular el total original y final de CVEs
    total_original = rejected_count + reserved_count + len(valid_rows)
    total_final = len(valid_rows)

    # Imprimir la tabla de resumen
    print("\nResumen:")
    print("-" * 50)
    print(f"Total de CVEs eliminados por tipo:")
    print(f"  - REJECT: {rejected_count}")
    print(f"  - RESERVED: {reserved_count}")
    print(f"Total original de CVEs: {total_original}")
    print(f"Total final de CVEs después de la limpieza: {total_final}")

    return cleaned_cves

# Ejemplo de uso
input_file = "../database/cves/2023_cves.csv"
cleaned_cves = clean_cves(input_file)

# Imprimir los CVEs limpiados
print("\nCVEs limpiados:")
# print(cleaned_cves)
